// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

//===================== MODEL =======================

// 1
model User {
  id          Int               @id @default(autoincrement())
  name        String
  phone       String?
  image       String?           @default("https://haycafe.vn/wp-content/uploads/2023/04/Hinh-anh-avatar-cute-TikTok-nam.jpg")
  email       String            @unique
  dateOfBirth DateTime?
  gender      GENDER_ENUM_TYPE?
  password    String
  status      STATUS_USER       @default(ACTIVE)
  address     String?
  hashedRt    String?
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  roleId               Int
  role                 Role?                 @relation(fields: [roleId], references: [id])
  notifications        Notification[]
  feedbacks            Feedback[]
  bookings             Booking[]
  customizedComboMenus CustomizedComboMenu[]

  @@map("users")
}

// 2
model Role {
  id       Int    @id @default(autoincrement())
  roleName ROLE   @default(CUSTOMER)
  user     User[]

  @@map("roles")
}

// 3
model Zone {
  id         Int    @id @default(autoincrement())
  zoneName   String
  priceRent  Int?
  numberRoom Int

  bookings Booking[]

  @@map("zones")
}

// 4
model Employee {
  id           Int              @id @default(autoincrement())
  employeeName String
  phone        String
  address      String
  salary       Int
  age          Int
  experience   Int
  gender       GENDER_ENUM_TYPE
  position     POSITION_ENUM
  regency      String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("employees")
}

// 5
model Feedback {
  id      Int    @id @default(autoincrement())
  rating  Int
  comment String

  userId Int
  user   User @relation(fields: [userId], references: [id])

  bookingId Int     @unique
  booking   Booking @relation(fields: [bookingId], references: [id])

  // comboMenuId Int
  // comeboMenu  ComboMenu @relation(fields: [comboMenuId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("feedbacks")
}

// 6
model Booking {
  id            Int      @id @default(autoincrement())
  numberOfGuest Int
  depositMoney  Int
  totalMoney    Int
  toTime        DateTime @default(now())
  comeInAt      DateTime
  comeOutAt     DateTime
  numberTable   Int      @map("number_table")

  userId Int
  user   User @relation(fields: [userId], references: [id])

  comboMenuId Int
  comboMenu   ComboMenu @relation(fields: [comboMenuId], references: [id])

  customizedComboMenu CustomizedComboMenu?

  service   Service @relation(fields: [serviceId], references: [id])
  serviceId Int

  statusBooking STATUS_BOOKING @default(NEW)

  statusPayment STATUS_PAYMENT @default(UNPAID)

  zoneId Int
  zone   Zone @relation(fields: [zoneId], references: [id])

  feedback Feedback?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("booking")
}

// 7
model ComboMenu {
  id          Int    @id @default(autoincrement())
  comboName   String
  description String
  totalPrice  Int?

  bookings             Booking[]
  comboItems           ComboItem[]
  customizedComboMenus CustomizedComboMenu[]

  service   Service @relation(fields: [serviceId], references: [id])
  serviceId Int

  // feedbacks Feedback[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("combo_menus")
}

// 8
model CustomizedComboMenu {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])

  comboMenuId Int
  comboMenu   ComboMenu   @relation(fields: [comboMenuId], references: [id])
  comboItems  ComboItem[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  booking   Booking @relation(fields: [bookingId], references: [id])
  bookingId Int     @unique

  @@map("customized_combo_menus")
}

// 9
model ComboItem {
  id         Int @id @default(autoincrement())
  quantity   Int
  totalPrice Int

  menuItemId Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  comboMenuId Int?
  combomenu   ComboMenu? @relation(fields: [comboMenuId], references: [id])

  comboCustomizedMenuId Int?
  customizedComboMenu   CustomizedComboMenu? @relation(fields: [comboCustomizedMenuId], references: [id])

  status STATUS_COMBO @default(AVAILABLE)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("combo_items")
}

// 10
model MenuItem {
  id          Int     @id @default(autoincrement())
  dishName    String
  description String?
  price       Int
  image       String?

  typeId   Int
  typeDish TypeDish @relation(fields: [typeId], references: [id])

  comboItems ComboItem[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("menu_item")
}

// 11
model TypeDish {
  id          Int     @id @default(autoincrement())
  typeName    String
  description String?

  menuItems MenuItem[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("type_dish")
}

// 12
model Service {
  id          Int     @id @default(autoincrement())
  serviceName String
  price       Int
  capacity    Int
  image       String? @default("https://img.freepik.com/free-vector/young-waitress-waiter-object-element-professional-service-restaurant_24797-2133.jpg")

  bookings Booking[]

  comboMenus ComboMenu[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("services")
}

// 13
model RestaurantInformation {
  id          Int    @id @default(autoincrement())
  filed       String
  description String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("restaurant_information")
}

// 14
model Notification {
  id          Int               @id @default(autoincrement())
  title       String
  description String
  userId      Int
  user        User              @relation(fields: [userId], references: [id])
  isRead      Boolean           @default(false)
  type        TYPE_NOTIFICATION @default(INFO)
  link        String?
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  @@map("notifications")
}

//===================== ENUM ======================

enum GENDER_ENUM_TYPE {
  MALE
  FEMALE
  OTHER
}

enum ROLE {
  ADMIN
  CUSTOMER
}

enum TYPE_NOTIFICATION {
  INFO
  WARNING
}

enum POSITION_ENUM {
  CHEF
  STAFF
}

enum STATUS_COMBO {
  CUSTOMIZED
  AVAILABLE
}

enum STATUS_BOOKING {
  NEW
  PENDING
  APPROVED
  FINISHED
  REJECTED
}

enum STATUS_PAYMENT {
  DEPOSIT
  PAID
  UNPAID
}

enum STATUS_USER {
  ACTIVE
  INACTIVE
}
