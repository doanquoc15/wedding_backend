// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//===================== MODEL =======================

//1
model User {
  id        Int               @id @default(autoincrement())
  name      String
  phone     String?
  email     String            @unique
  gender    GENDER_ENUM_TYPE?
  password  String
  address   String?
  hashedRt  String?
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")

  roleId Int
  role   Role? @relation(fields: [roleId], references: [id])

  feedbacks Feedback[]
  bookings  Booking[]

  @@map("users")
}

//2
model Role {
  id       Int    @id @default(autoincrement())
  roleName ROLE   @default(CUSTOMER)
  user     User[]

  @@map("roles")
}

//3
model Zone {
  id       Int       @id @default(autoincrement())
  zoneName ZONE_ENUM
  capacity Int

  bookings Booking[]

  @@map("zones")
}

//4
model Employee {
  id           Int              @id @default(autoincrement())
  employeeName String
  phone        String
  address      String
  salary       Decimal          @db.Decimal(30, 0)
  age          Int
  experience   Int
  gender       GENDER_ENUM_TYPE
  position     POSITION_ENUM
  regency      String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("employees")
}

//5
model Feedback {
  id      Int    @id @default(autoincrement())
  rating  Int
  comment String

  userId Int
  user   User @relation(fields: [userId], references: [id])

  bookingId Int?     @unique
  booking   Booking? @relation(fields: [bookingId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("feelbacks")
}

model Booking {
  id            Int      @id @default(autoincrement())
  numberOfGuest Int
  depositMoney  Decimal  @db.Decimal(30, 0)
  totalMoney    Decimal  @db.Decimal(30, 0)
  toTime        DateTime @default(now())
  fromTime      DateTime
  numberTable   Int      @map("number_table")

  userId Int
  user   User @relation(fields: [userId], references: [id])

  menus Menu[]

  service   Service @relation(fields: [serviceId], references: [id])
  serviceId Int

  zoneId Int
  zone   Zone @relation(fields: [zoneId], references: [id])

  table   Table @relation(fields: [tableId], references: [id])
  tableId Int

  feedback Feedback?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("booking")
}

//6
model Menu {
  id          Int      @id @default(autoincrement())
  comboName   String
  description String
  totalPrice  Decimal? @db.Decimal(30, 0)

  bookingId Int
  booking   Booking @relation(fields: [bookingId], references: [id])

  bookingFoods BookingFood[]

  service   Service @relation(fields: [serviceId], references: [id])
  serviceId Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("menus")
}

//13
model BookingFood {
  id         Int     @id @default(autoincrement())
  quantity   Int
  totalPrice Decimal @db.Decimal(30, 0)

  menuItem   MenuItem? @relation(fields: [menuItemId], references: [id])
  menuItemId Int?      @unique

  Menu   Menu @relation(fields: [menuId], references: [id])
  menuId Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

//7
model MenuItem {
  id          Int     @id @default(autoincrement())
  dishName    String
  description String
  price       Decimal @db.Decimal(30, 0)
  image       String?

  bookingFood BookingFood?

  typeId   Int
  typeDish TypeDish @relation(fields: [typeId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("menu_item")
}

//8
model TypeDish {
  id       Int    @id @default(autoincrement())
  typeName String

  menuItems MenuItem[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("type_dish")
}

//9

//10
model Service {
  id          Int     @id @default(autoincrement())
  serviceName String
  capacity    Int
  price       Decimal @db.Decimal(30, 0)
  image       String

  bookings Booking[]

  menus Menu[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("services")
}

//11
model RestaurantInformation {
  id          Int    @id @default(autoincrement())
  filed       String
  description String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("restaurant_information")
}

//12
model Table {
  id      Int @id() @default(autoincrement())
  maxSeat Int

  bookings Booking[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tables")
}

//===================== ENUM ======================

enum GENDER_ENUM_TYPE {
  MALE
  FEMALE
  OTHER
}

enum ROLE {
  ADMIN
  CUSTOMER
}

enum ZONE_ENUM {
  KHU_A
  KHU_B
  KHU_C
  OUTSITE
}

enum POSITION_ENUM {
  CHEF
  STAFF
}
